Git Basics
Undoing Changes
git init <directory>
git clone <repo>
git config user.name <name>
git add <directory> git commit -m "<message>"
git status
git log
git diff
Create empty Git repo in speciﬁed directory. Run with no arguments to initialize the current directory as a git repository. Clone repo located at <repo> onto local machine.  Original repo can be located on the local ﬁlesystem or on a remote machine via HTTP or SSH. Deﬁne author name to be used for all commits in current repo. Devs commonly use --global ﬂag to set conﬁg options for current user. Stage all changes in <directory> for the next commit. Replace <directory> with a <ﬁle> to change a speciﬁc ﬁle. Commit the staged snapshot, but instead of launching a text editor, use <message> as the commit message.
List which ﬁles are staged, unstaged, and untracked.
Display the entire commit history using the default format. For customization see additional options. Show unstaged changes between your index and working directory
Create new commit that undoes all of the changes made in <commit>, then apply it to the current branch.
git revert <commit>
Remove <ﬁle> from the staging area, but leave the working directory unchanged. This unstages a ﬁle without overwriting any changes.git reset <file> Shows which ﬁles would be removed from working directory. Use the -f ﬂag in place of the -n ﬂag to execute the clean. git clean -n
+
Git Branches
Remote Repositories
Rewriting Git History
Replace the last commit with the staged changes and last commit combined. Use with nothing staged to edit the last commit’s message. 
git commit --amend
Rebase the current branch onto <base>. <base> can be a commit ID, a branch name, a tag, or a relative reference to HEAD.
git rebase <base>
Show a log of changes to the local repository's HEAD. Add --relativedate ﬂag to show date info or --all to show all refs.
git reflog
List all of the branches in your repo. Add a <branch> argument to create a new branch with the name <branch>.
git branch
Create and check out a new branch named <branch>. Drop the -b ﬂag to checkout an existing branch.
git checkout -b <branch>
Merge <branch> into the current branch. git merge <branch>
Create a new connection to a remote repo. After adding a remote, you can use <name> as a shortcut for <url> in other commands.
git remote add <name> <url>
Fetches a speciﬁc <branch>, from the repo. Leave off <branch> to fetch all remote refs. 
git fetch <remote> <branch>
Fetch the speciﬁed remote’s copy of current branch and immediately merge it into the local copy. 
git pull <remote>
Push the branch to <remote>, along with necessary commits and objects. Creates named branch in the remote repo if it doesn’t exist

git conﬁg git diﬀ
git log
git reset
git rebase
git pull
git push
Additional Options +
Deﬁne the author name to be used for all commits by the current user.
git config --global user.name <name> Deﬁne the author email to be used for all commits by the current user.git config --global user.email <email> Create shortcut for a Git command. E.g. alias.glog "log --graph --oneline" will set "git glog" equivalent to "git log --graph --oneline" git config --global alias.<alias-name> <git-command> Set text editor used by commands for all users on the machine. <editor> arg should be the command that launches the desired editor (e.g., vi). git config --system core.editor <editor> Open the global conﬁguration ﬁle in a text editor for manual editing.git config --global --edit
git log -<limit>
git log --oneline
git log --stat
git log -p
git log --author="<pattern>" git log --grep="<pattern>"
git log <since>..<until>
git log -- <file>
git log --graph --decorate
Limit number of commits by <limit> .  E.g. "git log -5" will limit to 5 commits
Condense each commit to a single line.
Include which ﬁles were altered and the relative number of lines that were added or deleted from each of them.
Display the full diff of each commit.
Search for commits by a particular author. 
Search for commits with a commit message that matches <pattern>. Show commits that occur between <since> and <until>. Args can be a commit ID, branch name, HEAD, or any other kind of revision reference.
Show difference between working directory and last commit.
Only display commits that have the speciﬁed ﬁle. 
--graph ﬂag draws a text based graph of commits on left side of commit msgs. --decorate adds names of branches or tags of commits shown.
git diff HEAD
Show difference between staged changes and last commit.git diff --cached
Reset staging area to match most recent commit, but leave the working directory unchanged. git reset Reset staging area and working directory to match most recent commit and overwrites all changes in the working directory.git reset --hard Move the current branch tip backward to <commit>, reset the staging area to match, but leave the working directory alone. git reset <commit> Same as previous, but resets both the staging area & working directory to match. Deletes uncommitted changes, and all commits after <commit>. git reset --hard <commit>
Interactively rebase current branch onto <base>. Launches editor to enter commands for how each commit will be transferred to the new base. 
git rebase -i <base>
Fetch the remote’s copy of current branch and rebases it into the local copy. Uses git rebase instead of merge to integrate the branches.
git pull --rebase <remote>
Forces the git push even if it results in a non-fast-forward merge. Do not use the --force ﬂag unless you’re absolutely sure you know what you’re doing.
git push <remote> --force Push all of your local branches to the speciﬁed remote.git push <remote> --all Tags aren’t automatically pushed when you push a branch or use the --all ﬂag. The --tags ﬂag sends all of your local tags to the remote repo